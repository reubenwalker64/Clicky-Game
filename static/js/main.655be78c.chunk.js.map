{"version":3,"sources":["components/SpeakerCard/SpeakerCard.module.css","components/GameWrapper/GameWrapper.module.css","components/Jumbotron/Jumbotron.module.css","components/SpeakerCard/index.js","components/GameWrapper/GameWrapper.js","components/Jumbotron/Jumbotron.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","App-logo","App-logo-spin","App-header","App-link","allCards","jumbotron","SpeakerCard","props","react_default","a","createElement","className","onClick","handleClick","alt","name","src","image","title","company","GameWrapper","Jumbotron","Footer","state","speakers","message","score","id","clicked","imageList","_this","forEach","index","setState","images","sort","Math","random","newScore","_this2","this","components_Jumbotron_Jumbotron","map","speaker","components_SpeakerCard","removeSpeaker","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.655be78c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"SpeakerCard_App__RMA7R\",\"App-logo\":\"SpeakerCard_App-logo__j2gnC\",\"App-logo-spin\":\"SpeakerCard_App-logo-spin__1Oi3J\",\"App-header\":\"SpeakerCard_App-header__1YqCR\",\"App-link\":\"SpeakerCard_App-link__1gXxB\",\"allCards\":\"SpeakerCard_allCards__38vDm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"GameWrapper_App__ZuyIu\",\"App-link\":\"GameWrapper_App-link__fRzyl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"jumbotron\":\"Jumbotron_jumbotron__N96UQ\"};","import React from \"react\";\nimport \"./SpeakerCard.module.css\";\n\n//integrate handleClick by pulling in handleClick function as a prop\n\nfunction SpeakerCard(props) {\n  return (\n    <div className=\"card\" onClick={props.handleClick}>\n      <div className=\"img-container\">\n\t\t\t\t<br />\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n\t\t\t\t\t<br />\n\t\t\t\t\t<p>\n            <strong>Name:</strong> {props.name}\n          </p>\n          <p>\n            <strong>Title:</strong> {props.title}\n          </p>\n          <p>\n            <strong>Company:</strong> {props.company}\n          </p>\n\n      </div>\n    </div>\n  );\n}\n\nexport default SpeakerCard;\n","import React, { Component } from \"react\";\nimport \"./GameWrapper.module.css\";\nimport SpeakerCard from \"./../SpeakerCard/SpeakerCard\"\n\nfunction GameWrapper(props) {\n  return <div className=\"game-wrapper\">{props.children}</div>;\n}\n\n/*class GameWrapper extends Component {\n\tstate = {\n\t\timages: [],\n\t\tmessage: \"Select a speaker to start!\",\n\t\tscore: 0\n\t};\n\n\thandleClick = (id, clicked) => {\n\t\tfunction handleClick(e) {\n    e.preventDefault();\n  }\n\t\tconst imageList = this.state.images;\n\t\tif (clicked) {\n\t\t\timageList.forImage ((image, index) => {\n\t\t\t\timageList[index].clicked = false;\n\t\t\t});\n\t\t\treturn this.setState({\n\t\t\t\timages: imageList.sort(() => Math.random() - 0.5),\n\t\t\t\tmessage: \"Sorry, you choose that speaker before\",\n\t\t\t\tscore: 0\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\timageList.forImage((image, index) => {\n\t\t\t\tif (id === image.id) {\n\t\t\t\t\timageList[index].clicked = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst {score} = this.state;\n\t\t\tconst newScore = score + 1;\n\n\t\t\treturn this.setState({\n\t\t\t\timage: imageList.sort (() => Math.random() - .05),\n\t\t\t\tmessage: \"Congrats, choose your next speaker\",\n\t\t\t\tscore: newScore\n\t\t\t})\n\t\t}\n\t};\n\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"GameWrapper\">\n\t\t\t\t<div className=\"gameMessage\">\n\t\t\t\t\t<p>{this.state.message}</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"gameScore\">\n\t\t\t\t\t<p>Score: {this.state.score}</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t{this.state.images.map(image =>\n\t\t\t\t\t\t<SpeakerCard\n\t\t\t\t\t\t\tkey={image.id}\n\t\t\t\t\t\t\tid={image.id}\n\t\t\t\t\t\t\tname={image.name}\n\t\t\t\t\t\t\tclicked={image.clicked}\n\t\t\t\t\t\t\timage={image.image}\n\t\t\t\t\t\t\thandleClick={this.handleClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t};\n}\n*/\n/*error. Need event prevent default?*/\nexport default GameWrapper;\n","import React from 'react';\nimport \"./Jumbotron.module.css\";\n\nconst Jumbotron = (props) => (\n<div className=\"jumbotron jumbotron-fluid\">\n  <div className=\"container text-center\">\n    <h1 className=\"display-4\">Click a FEDC speaker!</h1>\n\t\t<hr />\n\t\t<p className=\"lead\">Click on any speaker from the 2019 FEDC Conference to earn a point, but don't click on anyone more than once!</p>\n\t\t<p className=\"lead\">See how many you can select without choosing a duplicate! Can you get to 12?</p>\n\t</div>\n</div>\n);\nexport default Jumbotron;\n","import React from 'react';\nimport \"./Footer.css\";\n\nconst Footer = (props) => (\n<div className=\"footer\">\n  <div className=\"container text-center\">\n    <h3>Thanks for playing.</h3>\n    <p className=\"lead\">See you at the 2019 FEDC Conference!</p>\n  </div>\n</div>\n);\nexport default Footer;\n","import React, { Component } from 'react';\nimport SpeakerCard from \"./components/SpeakerCard/index\";\nimport GameWrapper from \"./components/GameWrapper/GameWrapper\";\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\nimport Footer from \"./components/Footer/Footer\";\nimport speakers from \"./speakers.json\";\n\nimport './App.css';\n\nclass App extends Component {\n  // Setting this.state.speakers to the speakers json array\n\n    state = {\n    speakers,\n    message: \"Select a speaker to start!\",\n    score: 0\n  };\n\n  \thandleClick = (id, clicked) => {\n  \t\tfunction handleClick(e) {\n      e.preventDefault();\n    }\n/*edit if statement - not working*/\n  \t\tconst imageList = this.state.speakers;\n  \t\tif (clicked) {\n  \t\t\timageList.forEach((image, index) => {\n  \t\t\t\timageList[index].clicked = false;\n  \t\t\t});\n  \t\t\treturn this.setState({\n  \t\t\t\timages: imageList.sort(() => Math.random() - 0.5),\n  \t\t\t\tmessage: \"Sorry, you choose that speaker before\",\n  \t\t\t\tscore: 0\n  \t\t\t})\n  \t\t}\n  \t\telse {\n  \t\t\timageList.forEach ((image, index) => {\n  \t\t\t\tif (id === image.id) {\n  \t\t\t\t\timageList[index].clicked = true;\n  \t\t\t\t}\n  \t\t\t});\n\n  \t\t\tconst {score} = this.state;\n  \t\t\tconst newScore = score + 1;\n\n  \t\t\treturn this.setState({\n  \t\t\t\timage: imageList.sort(() => Math.random() - 0.5),\n  \t\t\t\tmessage: \"Congrats, choose your next speaker\",\n  \t\t\t\tscore: newScore\n  \t\t\t})\n  \t\t}\n  \t};\n\n  // Map over this.state.speakers and render a SpeakerCard component for each speaker object\n  render() {\n    return (\n\n      <div className=\"container-fluid GameWrapper\">\n\n        <Jumbotron>Speakers List</Jumbotron>\n        <div className=\"gameMessage text-center\">\n          <p>{this.state.message}</p>\n        </div>\n        <div className=\"gameScore text-center\">\n          <h4>Score: {this.state.score}</h4>\n        </div>\n        <div className=\"allCards col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3\">\n\n        {this.state.speakers.map(speaker => (\n          <SpeakerCard\n            handleClick={this.handleClick}\n            removeSpeaker={this.removeSpeaker}\n            id={speaker.id}\n            key={speaker.id}\n            name={speaker.name}\n            image={speaker.image}\n            title={speaker.title}\n            company={speaker.company}\n          />\n        ))}\n\n      </div>\n        <Footer>Footer Message</Footer>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}